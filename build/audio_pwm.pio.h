// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// audio_pwm //
// --------- //

#define audio_pwm_wrap_target 0
#define audio_pwm_wrap 8

#define audio_pwm_offset_entry_point 6u

static const uint16_t audio_pwm_program_instructions[] = {
            //     .wrap_target
    0x6001, //  0: out    pins, 1                    
    0xb826, //  1: mov    x, isr          side 1     
    0x0042, //  2: jmp    x--, 2                     
    0xb022, //  3: mov    x, y            side 0     
    0x0044, //  4: jmp    x--, 4                     
    0x00e0, //  5: jmp    !osre, 0                   
    0x80a0, //  6: pull   block                      
    0x60c8, //  7: out    isr, 8                     
    0x6048, //  8: out    y, 8                       
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program audio_pwm_program = {
    .instructions = audio_pwm_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config audio_pwm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + audio_pwm_wrap_target, offset + audio_pwm_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void audio_pwm_program_init(PIO pio, uint sm, uint offset, uint pin) {
 pio_gpio_init(pio, pin);
 pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
 pio_sm_config c = audio_pwm_program_get_default_config(offset);
 sm_config_set_sideset_pins(&c, pin);
 sm_config_set_out_shift(&c, true, false, 32);
 // sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
 sm_config_set_clkdiv(&c, 2);
 pio_sm_init(pio, sm, offset + 6, &c);
 pio_sm_set_enabled(pio, sm, true);}

#endif

